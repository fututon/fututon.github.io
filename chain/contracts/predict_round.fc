#include "imports/stdlib.fc";
#include "imports/msgs.fc";

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

const op::deploy = 0;
const op::withdraw = 1;
const op::place_up = 2;
const op::place_down = 3;
const op::test = 4;
const op::withdraw_winning = 5;

global int deployed;
global slice owner_address;
global int round_id;
global int up_sum;
global int down_sum;
global cell bets;

() load_data() impure {
    var ds = get_data().begin_parse();

    deployed = ds~load_uint(32);
    owner_address = ds~load_msg_addr();
    round_id = ds~load_uint(32);
    up_sum = ds~load_coins();
    down_sum = ds~load_coins();
    bets = ds~load_dict();

    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(deployed, 32)
            .store_slice(owner_address)
            .store_uint(round_id, 32)
            .store_coins(up_sum)
            .store_coins(down_sum)
            .store_dict(bets)
            .end_cell()
    );
}

() store_bet_in_dict(slice sender_address, int bet_amount, int bet_direction) impure {
    ~strdump("STORE BET");

    cell bet_cell = begin_cell()
        .store_slice(sender_address)
        .store_uint(bet_amount, 32)
        .store_uint(bet_direction, 32)
        .end_cell();

    bets~dict_set(256, sender_address, bet_cell.begin_parse());

    ~strdump("STORE BET FIN");
}

(int, slice, int, int) load_bet_from_dict(slice sender_address) impure {
    ~strdump("LOAD BET");

    (slice value, int flag) = dict_get?(bets, 256, sender_address);

    ;; TODO: если не найден?

    ~strdump("val");

    slice address = value~load_msg_addr();
    int bet_amount = value~load_uint(32);
    int bet_direction = value~load_uint(32);

    ~dump(address);
    ~dump(bet_amount);

    ~strdump("LOAD BET FIN");

    return (flag, address, bet_amount, bet_direction);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ;;

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; MESSAGES

    if (op == op::deploy) {
        ~strdump("DEPLOY");

        ;; Загружаем флаг деплоя
        ;; var ds = get_data().begin_parse();
        ;; deployed = ds~load_uint(32);
        ;; throw_if(100, deployed);

        deployed = 1;
        owner_address = sender_address;
        round_id = 0;
        up_sum = 0;
        down_sum = 0;
        bets = new_dict();

        save_data();
        return ();
    }

    load_data(); ;; here we populate the storage variables

    if (op == op::test) {
        ~strdump("TEST DUMP");

        cell bet_cell = begin_cell()
            .store_slice(sender_address)
            .store_uint(12, 32)
            .end_cell();

        ;; TODO: добавить в конец
        bets~udict_set(256, 0, bet_cell.begin_parse());

        ;; Увеличить сумму


        (int key, slice val, int flag) = bets.udict_get_min?(256);
        while (flag) {
            ;; do something with pair key->val

            ~strdump("BJH");
            ~dump(key);

            slice address = val~load_msg_addr();
            int betAmount = val~load_uint(32);

            ~dump(address);
            ~dump(betAmount);

            (key, val, flag) = bets.udict_get_next?(256, key);
        }


        ~strdump("address");
        cell address_dict = new_dict();
        address_dict~dict_set(256, sender_address, bet_cell.begin_parse());

        (slice value, int flag) = dict_get?(address_dict, 256, sender_address);

        ~strdump("val");

        slice address = value~load_msg_addr();
        int betAmount = value~load_uint(32);

        ~dump(address);
        ~dump(betAmount);
    }

    if (op == op::withdraw) {
        throw_unless(101, equal_slices(owner_address, sender_address));

        cell msg = begin_cell()
            .store_uint(0x18, 6) ;; flags
            .store_slice(owner_address)
            .store_coins(0) ;; we don't care about this value right now
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
            .store_uint(0, 32) ;; zero opcode - means simple transfer message with comment
            .store_slice("Owner withdraw!") ;; comment
            .end_cell();
        send_raw_message(msg, CARRY_ALL_BALANCE); ;; mode = 128 is used for messages that are to carry all the remaining balance of the current smart contract

        return ();
    }

    if (op == op::place_up) {
        ;; TODO: только одна ставка в адреса
        ;; TODO: сохранить адрес+ставка
        ;; TODO: ограничение макс ставки

        int bet_amount = msg_value;
        up_sum += bet_amount;
        store_bet_in_dict(sender_address, bet_amount, 1);
        save_data();
        return ();
    }

    if (op == op::place_down) {
        int bet_amount = msg_value;
        down_sum += bet_amount;
        store_bet_in_dict(sender_address, bet_amount, 2);
        save_data();
        return ();
    }

    if (op == op::withdraw_winning) {
        (int flag, slice address, int bet_amount, int bet_direction) = load_bet_from_dict(sender_address);
        ;; TODO: если нет ставки, то выход
        ;; TODO: если ставка не выигрышная, то выход

        int winning_prize = 1; ;; TODO: рассчет коэф в зависимости от стороны, минус комиссия

        ;; TODO: отметка что выведен приз (что если ошибка?)
        msgs::send_empty(winning_prize, sender_address, CARRY_REMAINING_GAS);

        save_data();

        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; GETTERS

int get_up_sum() method_id {
    load_data();
    return up_sum;
}

int get_down_sum() method_id {
    load_data();
    return down_sum;
}

int get_id() method_id {
    load_data();
    return round_id;
}

slice get_owner() method_id {
    load_data();
    return owner_address;
}

(int, slice, int, int) get_player_info(slice player_address) method_id {
    load_data();
    return load_bet_from_dict(player_address);
}

(int, int, int, int ) get_round_info() method_id {
    load_data();
    ;; раунд
    ;; стейт
    ;; upSum
    ;; downSum
    return (round_id, 1, up_sum, down_sum);
}