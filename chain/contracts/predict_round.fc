#include "imports/stdlib.fc";
#include "imports/msgs.fc";
#include "imports/bets-wallet-utils.fc";

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

const int provide_address_gas_consumption = 10000000;

const op::deploy = 0;
const op::withdraw_all = 1;
const op::place_up = 2;
const op::place_down = 3;
const op::test = 4;
const op::withdraw_winning = 5;
const op::set_state = 6;
const op::start_round = 7;
const op::finish_round = 8;
const op::finish_betting = 9;
const op::start_betting = 10;
const op::withdraw_commission = 11;

const state::new = 0;
const state::betting_started = 1;
const state::betting_finished = 2;
const state::round_started = 3;
const state::round_finished = 4;

const direction::up = 1;
const direction::down = 2;

const err::already_deployed = 100;
const err::not_owner = 101;
const err::not_betting_started = 200;
const err::has_bet = 201;
const err::not_round_finished = 300;
const err::has_no_bet = 301;
const err::not_win_direction = 302;
const err::winning_claimed = 303;

global int deployed;
global slice owner_address;
global cell bets_wallet_code;
global int round_id;
global int state;
global int marketmaker_bet_amount;
global int up_sum;
global int down_sum;
global int start_price;
global int finish_price;
global int round_direction;
global int commission; ;; Комиссия в %
global cell bets;

() load_data() impure {
    ~strdump("ELOAD DATD");
    var ds = get_data().begin_parse();
    
    deployed = ds~load_uint(32);
    owner_address = ds~load_msg_addr();
    round_id = ds~load_uint(32);
    state = ds~load_uint(32);
    marketmaker_bet_amount = ds~load_coins();
    up_sum = ds~load_coins();
    down_sum = ds~load_coins();
    start_price = ds~load_coins();
    finish_price = ds~load_coins();
    round_direction = ds~load_uint(32);
    commission = ds~load_uint(32);
    bets = ds~load_dict();
    bets_wallet_code = ds~load_ref();
    ds.end_parse();
    ~strdump("ELOAD DATA END");
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(deployed, 32)
            .store_slice(owner_address)
            .store_uint(round_id, 32)
            .store_uint(state,32)
            .store_coins(marketmaker_bet_amount)
            .store_coins(up_sum)
            .store_coins(down_sum)
            .store_coins(start_price)
            .store_coins(finish_price)
            .store_uint(round_direction, 32)
            .store_uint(commission, 32)
            .store_dict(bets)
            .store_ref(bets_wallet_code)
            .end_cell()
    );
}

() store_bet_in_dict(slice sender_address, int bet_amount, int bet_direction, int is_claimed) impure {
    cell bet_cell = begin_cell()
        .store_slice(sender_address)
        .store_uint(bet_amount, 32)
        .store_uint(bet_direction, 32)
        .store_int(is_claimed, 32)
        .end_cell();

    bets~dict_set(256, sender_address, bet_cell.begin_parse());
}

(int, slice, int, int, int) load_bet_from_dict(slice sender_address) impure {
    (slice value, int flag) = dict_get?(bets, 256, sender_address);

    if (flag == false) {
        return (flag, sender_address, 0, 0, 0);
    }

    slice address = value~load_msg_addr();
    int bet_amount = value~load_uint(32);
    int bet_direction = value~load_uint(32);
    int is_claimed = value~load_int(32);

    return (flag, address, bet_amount, bet_direction, is_claimed);
}

int calc_prize(int bet_amount, int bet_direction) impure {
    int precision = 1000000000;
    int prize_sum = (up_sum + down_sum) * (100 - commission) / 100;
    int winning_prize = 0;

    if (bet_direction == direction::up) {
        winning_prize = bet_amount * precision / up_sum * prize_sum / precision;
        ;; winning_prize =  muldiv(muldiv(bet_amount, precision, up_sum), prize_sum, precision);
    } else {
        winning_prize = bet_amount * precision / down_sum * prize_sum / precision;
    }

    return winning_prize;
}

int calc_total_commission() impure {
    int total_commission = (up_sum + down_sum) * commission / 100;
    return total_commission;
}

() mint_bet(slice to_address, cell bets_wallet_code, int amount) impure {
    cell state_init = calculate_bets_wallet_state_init(to_address, bets_wallet_code);
    slice to_wallet_address = calculate_bets_wallet_address(state_init);


    ~strdump("to_wallet_address");
    ~dump(to_wallet_address);


    cell body_msg = begin_cell()
        .store_uint(1, 32)
        .store_uint(0, 64)
        .end_cell();

    var msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(body_msg)
        .end_cell();


    ~strdump("raw send");

    send_raw_message(msg, 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~strdump("recv_internal");

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        ~strdump("EMPTY BODY");
        return ();
    }

    ~strdump("NOT EMPTY BODY");

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ~strdump("LOAD OP");

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; MESSAGES

    ~strdump("OP CODE");
    ~dump(op);

    load_data(); ;; here we populate the storage variables

    if (op == op::deploy) {
        ~strdump("DEPLOY");
        ~dump(up_sum);

        throw_if(err::already_deployed, deployed);

        deployed = 1;
        owner_address = sender_address;

        msgs::send_empty(0, sender_address, CARRY_REMAINING_GAS);

        ~strdump("DEPLOY END");

        save_data();
        return ();
    }

    if (op == op::test) {

        return ();
    }

    if (op == op::withdraw_all) {
        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        cell msg = begin_cell()
            .store_uint(0x18, 6) ;; flags
            .store_slice(owner_address)
            .store_coins(0) ;; we don't care about this value right now
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
            .store_uint(0, 32) ;; zero opcode - means simple transfer message with comment
            .store_slice("Owner withdraw!") ;; comment
            .end_cell();
        send_raw_message(msg, CARRY_ALL_BALANCE); ;; mode = 128 is used for messages that are to carry all the remaining balance of the current smart contract

        return ();
    }

    if (op == op::place_up) {
        ~strdump("PLACE UP");

        throw_unless(err::not_betting_started, state == state::betting_started);

        (int flag, slice address, int bet_amount, int bet_direction, int is_claimed) = load_bet_from_dict(sender_address);
        throw_if(err::has_bet, flag); ;; Ставка сделана

        ;; TODO: ограничение макс ставки

        int bet_amount = msg_value;
        up_sum += bet_amount;
        store_bet_in_dict(sender_address, bet_amount, direction::up, false);

        ;; Сохрпнить
        ~strdump("mint_bet");
        mint_bet(sender_address, bets_wallet_code, provide_address_gas_consumption);

        save_data();
        return ();
    }

    if (op == op::place_down) {
        ~strdump("PLACE DOWN");

        throw_unless(err::not_betting_started, state == state::betting_started);

        (int flag, slice address, int bet_amount, int bet_direction, int is_claimed) = load_bet_from_dict(sender_address);
        throw_if(err::has_bet, flag); ;; Ставка сделана

        int bet_amount = msg_value;
        down_sum += bet_amount;
        store_bet_in_dict(sender_address, bet_amount, direction::down, false);

         ;; Сохрпнить
        ~strdump("mint_bet");
        mint_bet(sender_address, bets_wallet_code, provide_address_gas_consumption);

        save_data();
        return ();
    }

    if (op == op::withdraw_winning) {
        ~strdump("WITHDRAW WINNING");

        throw_unless(err::not_round_finished, state == state::round_finished);
        (int flag, slice address, int bet_amount, int bet_direction, int is_claimed) = load_bet_from_dict(sender_address);
        throw_unless(err::has_no_bet, flag);
        throw_unless(err::not_win_direction, round_direction == bet_direction);
        throw_if(err::winning_claimed, is_claimed);

        int winning_prize = calc_prize(bet_amount, bet_direction);

        ~strdump("winning_prize");
        ~dump(winning_prize);

        int withdraw_amount = min(winning_prize, my_balance - provide_address_gas_consumption);

        ~strdump("withdraw_amount");
        ~dump(withdraw_amount);

        store_bet_in_dict(address, bet_amount, bet_direction, true);

        ;; TODO: что если ошибка?)
        msgs::send_empty(withdraw_amount, sender_address, CARRY_REMAINING_GAS);

        save_data();
        return ();
    }

    if (op == op::set_state) {
        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        int new_state = in_msg_body~load_uint(32);
        state = new_state;

        save_data();
        return ();
    }

    if (op == op::start_round) {
        ~strdump("START ROUND");

        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        start_price = in_msg_body~load_coins();
        state = state::round_started;

        save_data();
        return ();
    }

    if (op == op::finish_round) {
        ~strdump("FINISH ROUND");

        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        finish_price = in_msg_body~load_coins();

        ;; TODO: если цена одинаковая то чо?
        if (start_price < finish_price) {
            round_direction = direction::up;
        } else {
            round_direction = direction::down;
        }

        state = state::round_finished;

        ;; Вывести коммиссию и маркетмейкинг
        ~strdump("BAL");
        ~dump(my_balance);


        ~dump(up_sum);
        ~dump(down_sum);
        ~dump(up_sum + down_sum);


        int total_commission = calc_total_commission();
        int marketmaker_prize = calc_prize(marketmaker_bet_amount, round_direction);


        ~strdump("total_commission");
        ~dump(total_commission);

        ~strdump("marketmaker_prize");
        ~dump(marketmaker_bet_amount);
        ~dump(marketmaker_prize);

        



        int withdraw_amount = min(total_commission + marketmaker_prize, my_balance - provide_address_gas_consumption);


        ~strdump("withdraw_amount");
        ~dump(withdraw_amount);
        ~dump(my_balance);


        



        msgs::send_empty(withdraw_amount, sender_address, CARRY_REMAINING_GAS);

        save_data();
        return ();
    }

    if (op == op::start_betting) {
        ~strdump("START BETTING");

        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        state = state::betting_started;

        ;; маркетмейкинг
        ;; полученную сумму делим пополам и сохраняем "ставку маркетмейкера"
        marketmaker_bet_amount = msg_value / 2;
        up_sum = marketmaker_bet_amount;
        down_sum = marketmaker_bet_amount;

        save_data();
        return ();
    }


    if (op == op::finish_betting) {
        ~strdump("FINISH BETTING");

        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        state = state::betting_finished;

        save_data();
        return ();
    }

    if (op == op::withdraw_commission) {
        ~strdump("WITHDRAW COMMISSION");

        throw_unless(err::not_owner, equal_slices(owner_address, sender_address));

        int total_commission = calc_total_commission();
        int withdraw_amount = min(total_commission, my_balance - provide_address_gas_consumption);

        ~strdump("COMMISSION");
        ~dump(total_commission);
        ~dump(withdraw_amount);

        msgs::send_empty(withdraw_amount, sender_address, CARRY_REMAINING_GAS);

        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; GETTERS

int get_up_sum() method_id {
    load_data();
    return up_sum;
}

int get_down_sum() method_id {
    load_data();
    return down_sum;
}

int get_id() method_id {
    load_data();
    return round_id;
}

slice get_owner() method_id {
    load_data();
    return owner_address;
}

(int, slice, int, int, int) get_player_info(slice player_address) method_id {
    load_data();
    return load_bet_from_dict(player_address);
}

(int, int, int, int, int, int, int) get_round_info() method_id {
    load_data();
    return (round_id, state, up_sum, down_sum, start_price, finish_price, round_direction);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_user_bets_wallet_address(owner_address, bets_wallet_code);
    
}