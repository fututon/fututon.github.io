#include "stdlib.fc";

{-
    msgs.fc

    This library simplify the creation of outgoing messages from a contract.
-}


{-
    consts.fc

    Contants needed.
-}

;; Params

;; Address consts

const ADDR_TYPE_NONE = 0;
const ADDR_TYPE_EXTERN = 1;
const ADDR_TYPE_STD = 2;
const ADDR_TYPE_VAR = 3;

const HOLE_ADDRESS = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;

const int TRUE = -1;
const int FALSE = 0;
const int MASTERCHAIN = -1;
const int BASECHAIN = 0;

;; Message modes. See ./msgs.fc for more

;; 0b011000 tag - 0, ihr_disabled - 1, bounce - 1, bounced - 0, src = adr_none$00
const int SEND_MSG_BOUNCEABLE = 0x18;
;; 0b010000 tag - 0, ihr_disabled - 1, bounce - 0, bounced - 0, src = adr_none$00
const int SEND_MSG_NON_BOUNCEABLE = 0x10;

;; MODIFIER
const NORMAL = 0;
const PAID_EXTERNALLY = 1;
const IGNORE_ERRORS = 2;

;; SEND MODES
const BOUNCE_IF_FAIL = 16;
const DESTROY_IF_ZERO = 32;
const CARRY_REMAINING_GAS = 64;
const CARRY_ALL_BALANCE = 128;

;; SENDMSG modes
const SUB_BALANCE_MSG = 64;
const SUB_BALANCE_CONTRACT = 128;
const ONLY_ESTIMATE_FEES = 1024;

;; SEND MODES QUIETED
const QDESTROY_IF_ZERO = 34;
const QCARRY_REMAINING_GAS = 66;
const QCARRY_ALL_BALANCE = 130;

;; Contex index constants. See ./ctx.fc for more
const IS_BOUNCED = 0;
const SENDER = 1;
const FWD_FEE = 2;
const OPCODE = 3;
const QUERY_ID = 4;
const BALANCE = 5;
const MSG_VALUE = 6;
const BODY = 7;
const RAW_MSG = 8;

;; Raw reserves constants. See ./reserves.fc for more
const RESERVE_EXACTLY    = 0;
const RESERVE_ALL_EXCEPT = 1;
const RESERVE_AT_MOST    = 2;
const EXTRN_DO_NOT_FAIL  = 2;
const BALANCE_INCREASED  = 4;
const BALANCE_DECREASED  = 8;
const int RESERVE_BOUNCE_ON_ACTION_FAIL = 16;



() msgs::send_empty(int amount, slice to, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_simple(int amount, slice to, cell body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(body)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_bsimple(int amount, slice to, builder body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .store_builder(body)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_nobounce(int amount, slice to, cell body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_NON_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(body)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_bnobounce(int amount, slice to, builder body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_NON_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
        .store_builder(body)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_with_stateinit(int amount, slice to, cell state_init, cell body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(7, 108)
        .store_ref(state_init)
        .store_ref(body)
        .end_cell();
    send_raw_message(msg, mode);
}

() msgs::send_bwith_stateinit(int amount, slice to, cell state_init, builder body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(SEND_MSG_BOUNCEABLE, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(6, 108)
        .store_ref(state_init)
        .store_builder(body)
        .end_cell();
    send_raw_message(msg, mode);
}