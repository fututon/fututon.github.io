#include "imports/stdlib.fc";
#include "imports/msgs.fc";

(slice, int) dict_get?(cell dict, int key_len, slice index) asm(index dict key_len) "DICTGET" "NULLSWAPIFNOT";

const op::deploy = 0;
const op::add_round = 1;

global int deployed;
global cell rounds_addressed;

() load_data() impure {
    var ds = get_data().begin_parse();

    deployed = ds~load_uint(32);
    rounds_addressed = ds~load_dict();

    ds.end_parse();
}

() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(deployed, 32)
            .store_dict(rounds_addressed)
            .end_cell()
    );
}

() store_round_in_dict(slice sender_address) impure {
    cell bet_cell = begin_cell()
        .store_slice(sender_address)
        .end_cell();

    rounds_addressed~dict_set(256, sender_address, bet_cell.begin_parse());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ~strdump("recv_internal");

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        ~strdump("EMPTY BODY");
        return ();
    }

    ~strdump("NOT EMPTY BODY");

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    ~strdump("LOAD OP");

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    ;; MESSAGES

    ~strdump("OP CODE");
    ~dump(op);

    if (op == op::deploy) {
        ~strdump("DEPLOY");

        ;; ;; Загружаем флаг деплоя
        ;; var ds = get_data().begin_parse();
        ;; deployed = ds~load_uint(32);
        ;; throw_if(100, deployed);
        ;;
        deployed = 1;
        rounds_addressed = new_dict();

        msgs::send_empty(0, sender_address, CARRY_REMAINING_GAS);

        save_data();
        return ();
    }

    load_data(); ;; here we populate the storage variables

    if (op == op::add_round) {
        ~strdump("ADD ROUND");

        store_round_in_dict(sender_address);

        save_data();
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; GETTERS

cell get_rounds() method_id {
    load_data();
    return rounds_addressed;
}